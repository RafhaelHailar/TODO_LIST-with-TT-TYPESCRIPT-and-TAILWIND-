{"mappings":"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","sources":["index.js"],"sourcesContent":["\"use strict\";\nclass TaskHandler {\n    constructor(container) {\n        this._TASKS = [];\n        this.container = container;\n        //container all html used\n        this.HTML = {\n            addTask: container.querySelector(\"#add-task-form\"),\n            taskList: container.querySelector(\"#task-list\"),\n            noTask: container.querySelector(\"#no-task\"),\n        };\n        this.HTML.taskListContainer = this.HTML.taskList.parentElement;\n        this.dragdrop = new DragDrop(this.HTML.taskList, this, \"_TASKS\");\n        this.dragdrop.init();\n    }\n    //as the name say it take a Task type value and push that to the _TASKS container and then update the display\n    addTask(task) {\n        this._TASKS.push(task);\n        this.displayTask();\n    }\n    //remove the task by the index and then update the display\n    removeTask(index) {\n        this._TASKS.splice(index, 1);\n        this.displayTask();\n    }\n    //set the task to done / undone then update the display\n    toggleTaskDone(index) {\n        this._TASKS[index].done = !this._TASKS[index].done;\n        this.displayTask();\n    }\n    //update the task by the index and then update the display\n    updateTask(index) {\n        let task_item = this.HTML.taskList.querySelectorAll(\"#task-list .task-item\")[index];\n        let task_name_input = task_item.querySelector(\"input\");\n        task_name_input === null || task_name_input === void 0 ? void 0 : task_name_input.removeAttribute(\"disabled\");\n        task_name_input === null || task_name_input === void 0 ? void 0 : task_name_input.focus();\n        task_name_input === null || task_name_input === void 0 ? void 0 : task_name_input.addEventListener(\"blur\", finishUpdate.bind(this));\n        function finishUpdate() {\n            task_name_input === null || task_name_input === void 0 ? void 0 : task_name_input.setAttribute(\"disabled\", \"\");\n            this._TASKS[index].task_name = task_name_input === null || task_name_input === void 0 ? void 0 : task_name_input.value;\n        }\n    }\n    displayTask() {\n        //remove the html tasklist child/s\n        this.HTML.taskList.innerHTML = \"\";\n        //show \"NO TASK\" html if there is no task in the task list\n        this.updateNoTaskDisplay(this.getTasksTotal() > 0);\n        for (let i = 0; i < this.getTasksTotal(); i++) {\n            const { task_name, done } = this._TASKS[i];\n            //outer cointainer\n            let container = document.createElement(\"div\");\n            container.className = \"task-item flex border justify-between cursor-pointer select-none w-full bg-white my-1 rounded px-2\";\n            //the checkmark circle\n            const check_mark = document.createElement(\"div\");\n            check_mark.className = \"flex justify-center items-center\";\n            const check_circle = document.createElement(\"div\");\n            check_circle.className = \"border p-3 rounded-full relative flex justify-center items-center\";\n            check_mark.addEventListener(\"click\", () => this.toggleTaskDone(i));\n            //the task name starts with disabled / can't be edited , but once the update button is clicked it will be updatable again\n            let task_name_display = document.createElement(\"input\");\n            task_name_display.setAttribute(\"disabled\", \"\");\n            task_name_display.className = \"disabled:bg-white disabled:cursor-pointer mx-5 flex-1\";\n            task_name_display.value = task_name;\n            //container for buttons\n            let btn_container = document.createElement(\"div\");\n            //the done and update buttons\n            let remove_btn = document.createElement(\"button\");\n            remove_btn.innerHTML = \"REMOVE\";\n            let update_btn = document.createElement(\"button\");\n            update_btn.innerHTML = \"UPDATE\";\n            remove_btn.className = update_btn.className = \"border px-5 py-2 text-slate-100 rounded\";\n            remove_btn.classList.add(\"bg-red-500\");\n            update_btn.classList.add(\"bg-cyan-500\");\n            if (done) {\n                task_name_display.classList.add(\"line-through\");\n                check_circle.innerHTML = `<i class=\"fa-solid fa-check absolute\"></i>`;\n            }\n            else {\n                task_name_display.classList.remove(\"line-through\");\n                check_circle.innerHTML = ``;\n            }\n            //add the handlers\n            remove_btn.addEventListener(\"click\", () => this.removeTask(i));\n            update_btn.addEventListener(\"click\", () => this.updateTask(i));\n            btn_container.appendChild(update_btn);\n            btn_container.appendChild(remove_btn);\n            check_mark.appendChild(check_circle);\n            //put all of the to the container\n            container.appendChild(check_mark);\n            container.appendChild(task_name_display);\n            container.appendChild(btn_container);\n            //put the container to the task list\n            this.HTML.taskList.appendChild(container);\n            //solution for disabled element event listener don't work\n            let task_name_display_box = document.createElement(\"div\");\n            task_name_display_box.className = \"absolute top-0 left-0\";\n            task_name_display_box.style.width = task_name_display.offsetWidth + \"px\";\n            task_name_display_box.style.height = task_name_display.offsetHeight + \"px\";\n            task_name_display_box.style.left = task_name_display.offsetLeft + \"px\";\n            container.appendChild(task_name_display_box);\n        }\n        setTimeout(() => {\n            this.dragdrop.setItems();\n        });\n    }\n    updateNoTaskDisplay(hide) {\n        if (hide) {\n            this.HTML.noTask.classList.add(\"hidden\");\n            this.HTML.taskListContainer.classList.add(\"px-2\");\n            this.HTML.taskListContainer.classList.add(\"py-1\");\n        }\n        else {\n            this.HTML.noTask.classList.remove(\"hidden\");\n            this.HTML.taskListContainer.classList.remove(\"px-2\");\n            this.HTML.taskListContainer.classList.remove(\"py-1\");\n        }\n    }\n    getTasksTotal() {\n        return this._TASKS.length;\n    }\n    init() {\n        this.HTML.addTask.addEventListener(\"submit\", handleAddTask.bind(this));\n        //handle events\n        function handleAddTask(event) {\n            event.preventDefault();\n            //get the add task input value\n            let task_name_input = this.HTML.addTask.querySelector(\"input\");\n            let task_name = task_name_input.value;\n            const TASK = {\n                id: this._TASKS.length + 1,\n                task_name,\n                done: false\n            };\n            //reset the input \n            task_name_input.value = \"\";\n            //add the task\n            this.addTask(TASK);\n        }\n    }\n}\nconst taskHandler = new TaskHandler(document.querySelector(\"#task-handler\"));\ntaskHandler.init();\n"],"names":[],"version":3,"file":"index.c36f364e.js.map","sourceRoot":"/__parcel_source_root/"}