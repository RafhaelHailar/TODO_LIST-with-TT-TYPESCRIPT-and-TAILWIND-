{"mappings":"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","sources":["index.ts"],"sourcesContent":["type Task = {\r\n    task_name: string;\r\n}\r\n\r\nclass DragDrop {\r\n    container: HTMLElement;\r\n    target: null | number;\r\n    initialPosition: Record<string,null | number>;\r\n    items: any;\r\n    holders: any;\r\n    order: number[]\r\n\r\n    constructor(container: HTMLElement) {\r\n        this.container = container;\r\n        this.target = null;\r\n        this.initialPosition = {\r\n            x : null,\r\n            y : null\r\n        };\r\n        this.order = [];\r\n        this.items = this.holders;\r\n    }\r\n\r\n    makeHolders(): void {\r\n        let items = this.items;\r\n        console.log(items.length)\r\n        for (let i = 0;i < items.length;i++) {\r\n            let holder = document.createElement(\"div\");\r\n            holder.className = \"holder\";\r\n            let {width,height} = DragDrop.utils.getBoundingClientRect(items[i]) as DOMRect;\r\n            holder.style.width = width + \"px\";\r\n            holder.style.height = height + \"px\";\r\n            this.container.appendChild(holder);\r\n        }\r\n        this.holders = this.container.querySelectorAll(\".holder\");\r\n    }\r\n\r\n    removeHolders(): void {\r\n        let holders = this.container.querySelectorAll(\".holder\");\r\n        for (let i = 0;i < holders.length;i++) {\r\n            let holder = holders[i];\r\n            holder.remove();\r\n        }\r\n    }   \r\n\r\n    setItems(): void {\r\n        this.removeHolders();\r\n        \r\n        let children = this.container.children;         \r\n        for (let i = 0;i < children.length;i++) {\r\n            children[i].classList.add(\"item\");\r\n        }\r\n        \r\n        this.items = this.container.querySelectorAll(\".item\") as NodeListOf<Element>;\r\n        this.makeHolders();\r\n\r\n        let items = this.items;\r\n        let holders = this.holders;\r\n        for (let i = 0;i < items.length;i++) {\r\n            let item = items[i];\r\n            item.setAttribute(\"data-ddid\",i);\r\n            let holder = holders[i];\r\n            let holderBoxY = DragDrop.utils.getBoundingClientRect(holder,\"y\") as number;\r\n            let containerBoxY = DragDrop.utils.getBoundingClientRect(this.container,\"y\") as number;\r\n            item.style.transform = `translateY(${holderBoxY - containerBoxY}px)`;\r\n\r\n            setTimeout(() => {\r\n                item.style.transition = `transform 0.15s ease-in`;\r\n            });\r\n\r\n            this.order.push(i);\r\n        }\r\n    }\r\n\r\n    updateItems(): void {\r\n        let items = this.items;\r\n        let holders = this.holders;\r\n        for (let i = 0;i < items.length;i++) {\r\n            let item = items[i];\r\n            let index = Number(item.getAttribute(\"data-ddid\"));\r\n            if (this.target == index) continue;\r\n            let holder = holders[this.order.indexOf(index)];\r\n            let holderBoxY = DragDrop.utils.getBoundingClientRect(holder,\"y\") as number;\r\n            let containerBoxY = DragDrop.utils.getBoundingClientRect(this.container,\"y\") as number;\r\n            item.style.transform = `translateY(${holderBoxY - containerBoxY}px)`;\r\n        }\r\n    }\r\n\r\n\r\n    firstContact(event: MouseEvent): void {\r\n        let eventTarget: HTMLElement = event.target as HTMLElement;\r\n        let target = eventTarget.getAttribute(\"data-ddid\");\r\n        if (target == null || !eventTarget.classList.contains(\"item\")) return;\r\n\r\n        let item = this.items[target];\r\n        item.style.transition = \"transform 0s\";\r\n\r\n        this.target = Number(target);\r\n        let {pageX,pageY} = event;\r\n        this.initialPosition = {\r\n            x: pageX,\r\n            y: pageY\r\n        };\r\n    }\r\n\r\n    dragging(event: MouseEvent): void {\r\n        if (this.target == null) return;\r\n        let currentPosition = {\r\n            x: event.pageX,\r\n            y: event.pageY\r\n        }\r\n\r\n        let holder = this.holders[this.order.indexOf(this.target)];\r\n        let holderBoxY = DragDrop.utils.getBoundingClientRect(holder,\"y\") as number;\r\n        this.items[this.target].style.transform = `translate(${currentPosition.x - (this.initialPosition.x as number)}px,${(holderBoxY - (DragDrop.utils.getBoundingClientRect(this.container,\"y\") as number)) + currentPosition.y - (this.initialPosition.y as number)}px)`;\r\n\r\n        this.collission(holder);\r\n    }\r\n\r\n    collission(current: HTMLElement): void {\r\n        let currentBoxY = DragDrop.utils.getBoundingClientRect(current,\"y\") as number;\r\n        let holders = this.holders;\r\n\r\n        for (let i = 0;i < holders.length;i++) {\r\n            let holder = holders[i];\r\n            if (current == holder) continue;\r\n            let holderBox = DragDrop.utils.getBoundingClientRect(holder) as DOMRect;\r\n            let item = this.items[this.target as number];\r\n            let itemBox = DragDrop.utils.getBoundingClientRect(item) as DOMRect;\r\n            if (Math.abs((holderBox.y + holderBox.height / 2) - (itemBox.y + itemBox.height / 2)) <= itemBox.height / 2) {\r\n\r\n                this.order = DragDrop.utils.insertAt(this.order,this.target as number,i) as number[];\r\n                this.initialPosition.y = ((this.initialPosition.y as number) - currentBoxY) + (DragDrop.utils.getBoundingClientRect(holders[this.order.indexOf(this.target as number)],\"y\") as number);\r\n                this.updateItems();\r\n            }\r\n        }\r\n    }\r\n\r\n    releaseContact(): void {\r\n        if (this.target == null) return;\r\n\r\n        let item = this.items[this.target];\r\n        item.style.transition = `transform 0.15s ease-in`;\r\n        item.style.opacity = 1;\r\n        this.target = null;\r\n        this.updateItems();\r\n    }\r\n\r\n    init(): void {\r\n        this.order = [];\r\n\r\n        this.setItems();\r\n        \r\n        const handleFirstContact = (event: MouseEvent): void => {\r\n            this.firstContact(event);\r\n        }\r\n\r\n        const handleDragging = (event: MouseEvent): void => {\r\n            this.dragging(event);\r\n        }\r\n\r\n        const handleReleaseContact = () => this.releaseContact();\r\n\r\n        this.container.removeEventListener(\"mousedown\",handleFirstContact);\r\n        this.container.removeEventListener(\"mousemove\",handleDragging);\r\n        window.removeEventListener(\"mouseup\",handleReleaseContact);\r\n\r\n        this.container.addEventListener(\"mousedown\",handleFirstContact);\r\n        this.container.addEventListener(\"mousemove\",handleDragging);\r\n        window.addEventListener(\"mouseup\",handleReleaseContact);\r\n    }\r\n    \r\n    static utils = {\r\n        insertAt: function(array: number[],target: number,to: number): number[] | undefined  {\r\n            let initial_index = array.indexOf(target);\r\n            if (initial_index < to) {\r\n                return array.slice(0,initial_index).concat(array.slice(initial_index + 1,to + 1)).concat([target]).concat(array.slice(to + 1,array.length));\r\n            } else if (initial_index > to) {\r\n                return array.slice(0,to).concat([target]).concat(array.slice(to,initial_index)).concat(array.slice(initial_index + 1,array.length));\r\n            }\r\n        },\r\n        getBoundingClientRect: function(target: HTMLElement,...properties: Array<string>): (number | DOMRect | object) {   \r\n            let rect: Record<string,number> = target.getBoundingClientRect() as any;\r\n            if (properties.length == 1) {\r\n                return rect[properties[0]];\r\n            }else if (!properties || properties.length == 0) return rect;\r\n\r\n            let result: Record<string,number> = {};\r\n            for (let i = 0;i < properties.length;i++) {\r\n                let property = properties[i];\r\n                result[property] = rect[property];\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\nclass TaskHandler {\r\n    _TASKS: Array<Task>;\r\n    HTML: Record<string,HTMLElement>;\r\n    container: HTMLElement;\r\n    constructor(container: HTMLElement) {\r\n        this._TASKS = [];\r\n        this.container = container;\r\n\r\n        //container all html used\r\n        this.HTML = {\r\n            addTask: container.querySelector(\"#add-task-form\") as HTMLElement,\r\n            taskList: container.querySelector(\"#task-list\") as HTMLElement,\r\n            noTask: container.querySelector(\"#no-task\") as HTMLElement\r\n        };\r\n    }\r\n\r\n    //as the name say it take a Task type value and push that to the _TASKS container and then update the display\r\n    addTask(task: Task): void {\r\n        this._TASKS.push(task);\r\n        this.displayTask();\r\n    }\r\n\r\n    //remove the task by the index and then update the display\r\n    removeTask(index: number): void {\r\n        this._TASKS.splice(index,1);\r\n        this.displayTask();\r\n    }\r\n\r\n    //update the task by the index and then update the display\r\n    updateTask(index: number): void {\r\n        let task_item = this.HTML.taskList.querySelectorAll(\"#task-list .task-item\")[index];\r\n        let task_name_input = task_item.querySelector(\"input\");\r\n    \r\n        task_name_input?.removeAttribute(\"disabled\");\r\n        task_name_input?.focus();\r\n    \r\n        task_name_input?.addEventListener(\"blur\",finishUpdate.bind(this));\r\n    \r\n        function finishUpdate(this: TaskHandler): void {\r\n            task_name_input?.setAttribute(\"disabled\",\"\");\r\n            this._TASKS[index].task_name = task_name_input?.value as string;\r\n        }\r\n    }\r\n\r\n    displayTask(): void {\r\n        //remove the html tasklist child/s\r\n        this.HTML.taskList.innerHTML = \"\";\r\n\r\n        //show \"NO TASK\" html if there is no task in the task list\r\n        this.updateNoTaskDisplay(this.getTasksTotal() > 0);\r\n\r\n        for (let i = 0;i < this.getTasksTotal();i++) {\r\n            const {task_name} = this._TASKS[i] as Task;\r\n\r\n            //outer cointainer\r\n            let container = document.createElement(\"div\");\r\n            container.className = \"task-item flex border justify-between cursor-pointer select-none absolute w-full\";\r\n\r\n            //the task name starts with disabled / can't be edited , but once the update button is clicked it will be updatable again\r\n            let task_name_display: HTMLInputElement = document.createElement(\"input\");\r\n            task_name_display.setAttribute(\"disabled\",\"\");\r\n            task_name_display.className = \"disabled:bg-white disabled:cursor-pointer\";\r\n            task_name_display.value = task_name;\r\n\r\n            //the done and update buttons\r\n            let done_btn = document.createElement(\"button\");\r\n            done_btn.innerHTML = \"DONE\";\r\n\r\n            let update_btn = document.createElement(\"button\");\r\n            update_btn.innerHTML = \"UPDATE\";\r\n\r\n            done_btn.className = update_btn.className = \"border px-5 py-2\";\r\n\r\n            //add the handlers\r\n            done_btn.addEventListener(\"click\",() => this.removeTask(i));\r\n            update_btn.addEventListener(\"click\",() => this.updateTask(i));\r\n            \r\n            //put all of the to the container\r\n            container.appendChild(task_name_display);\r\n            container.appendChild(update_btn);\r\n            container.appendChild(done_btn);\r\n            \r\n            //put the container to the task list\r\n            this.HTML.taskList.appendChild(container);  \r\n\r\n            //solution for disabled element event listener don't work\r\n            let task_name_display_box = document.createElement(\"div\");\r\n            task_name_display_box.className = \"absolute top-0 left-0\";\r\n            task_name_display_box.style.width = task_name_display.offsetWidth + \"px\";\r\n            task_name_display_box.style.height = task_name_display.offsetHeight + \"px\";\r\n            \r\n            container.appendChild(task_name_display_box);\r\n\r\n            container.style.transform = `translateY(${i * container.offsetHeight}px)`;\r\n        }\r\n\r\n        let dragdrop = new DragDrop(this.HTML.taskList);\r\n        dragdrop.init();\r\n    }\r\n\r\n    updateNoTaskDisplay(hide: boolean): void {\r\n        if (hide) this.HTML.noTask.classList.add(\"hidden\");\r\n        else this.HTML.noTask.classList.remove(\"hidden\");\r\n    }\r\n\r\n    getTasksTotal(): number {\r\n        return this._TASKS.length;\r\n    }\r\n\r\n    init():void {\r\n        this.HTML.addTask.addEventListener(\"submit\",handleAddTask.bind(this));\r\n\r\n        //handle events\r\n        function handleAddTask(this: TaskHandler,event: Event):void {\r\n            event.preventDefault();\r\n\r\n            //get the add task input value\r\n            let task_name_input = this.HTML.addTask.querySelector(\"input\") as HTMLInputElement;\r\n            let task_name = task_name_input.value;\r\n\r\n            const TASK: Task = {\r\n                task_name\r\n            };\r\n\r\n            //reset the input \r\n            task_name_input.value = \"\";\r\n\r\n            //add the task\r\n            this.addTask(TASK);\r\n        }\r\n    }\r\n}\r\n\r\nconst taskHandler = new TaskHandler(document.querySelector(\"#task-handler\") as HTMLElement);\r\ntaskHandler.init();"],"names":[],"version":3,"file":"index.242b51c6.js.map","sourceRoot":"/__parcel_source_root/"}