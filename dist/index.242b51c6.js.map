{"mappings":"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","sources":["index.ts"],"sourcesContent":["type Task = {\r\n    task_name: string;\r\n}\r\n\r\nclass TaskHandler {\r\n    _TASKS: Array<Task>;\r\n    HTML: Record<string,HTMLElement>;\r\n    container: HTMLElement;\r\n    constructor(container: HTMLElement) {\r\n        this._TASKS = [];\r\n        this.container = container;\r\n\r\n        //container all html used\r\n        this.HTML = {\r\n            addTask: container.querySelector(\"#add-task-form\") as HTMLElement,\r\n            taskList: container.querySelector(\"#task-list\") as HTMLElement,\r\n            noTask: container.querySelector(\"#no-task\") as HTMLElement\r\n        };\r\n    }\r\n\r\n    //as the name say it take a Task type value and push that to the _TASKS container and then update the display\r\n    addTask(task: Task): void {\r\n        this._TASKS.push(task);\r\n        this.displayTask();\r\n    }\r\n\r\n    //remove the task by the index and then update the display\r\n    removeTask(index: number): void {\r\n        this._TASKS.splice(index,1);\r\n        this.displayTask();\r\n    }\r\n\r\n    //update the task by the index and then update the display\r\n    updateTask(index: number): void {\r\n        let task_item = this.HTML.taskList.querySelectorAll(\"#task-list .task-item\")[index];\r\n        let task_name_input = task_item.querySelector(\"input\");\r\n    \r\n        task_name_input?.removeAttribute(\"disabled\");\r\n        task_name_input?.focus();\r\n    \r\n        task_name_input?.addEventListener(\"blur\",finishUpdate.bind(this));\r\n    \r\n        function finishUpdate(this: TaskHandler): void {\r\n            task_name_input?.setAttribute(\"disabled\",\"\");\r\n            this._TASKS[index].task_name = task_name_input?.value as string;\r\n        }\r\n    }\r\n\r\n    displayTask(): void {\r\n        //remove the html tasklist child/s\r\n        this.HTML.taskList.innerHTML = \"\";\r\n\r\n        //show \"NO TASK\" html if there is no task in the task list\r\n        this.updateNoTaskDisplay(this.getTasksTotal() > 0);\r\n\r\n        for (let i = 0;i < this.getTasksTotal();i++) {\r\n            const {task_name} = this._TASKS[i] as Task;\r\n\r\n            //outer cointainer\r\n            let container = document.createElement(\"div\");\r\n            container.className = \"task-item flex border justify-between cursor-pointer select-none w-full bg-white my-3\";\r\n\r\n            //the task name starts with disabled / can't be edited , but once the update button is clicked it will be updatable again\r\n            let task_name_display: HTMLInputElement = document.createElement(\"input\");\r\n            task_name_display.setAttribute(\"disabled\",\"\");\r\n            task_name_display.className = \"disabled:bg-white disabled:cursor-pointer mx-5\";\r\n            task_name_display.value = task_name;\r\n\r\n            //container for buttons\r\n            let btn_container = document.createElement(\"div\");\r\n\r\n            //the done and update buttons\r\n            let done_btn = document.createElement(\"button\");\r\n            done_btn.innerHTML = \"DONE\";\r\n\r\n            let update_btn = document.createElement(\"button\");\r\n            update_btn.innerHTML = \"UPDATE\";\r\n\r\n            done_btn.className = update_btn.className = \"border px-5 py-2 text-slate-100 rounded\";\r\n            done_btn.classList.add(\"bg-red-500\");\r\n            update_btn.classList.add(\"bg-cyan-500\");\r\n\r\n            //add the handlers\r\n            done_btn.addEventListener(\"click\",() => this.removeTask(i));\r\n            update_btn.addEventListener(\"click\",() => this.updateTask(i));\r\n            \r\n            btn_container.appendChild(update_btn);\r\n            btn_container.appendChild(done_btn);\r\n\r\n            //put all of the to the container\r\n            container.appendChild(task_name_display);\r\n            container.appendChild(btn_container);\r\n            \r\n            //put the container to the task list\r\n            this.HTML.taskList.appendChild(container);  \r\n\r\n            //solution for disabled element event listener don't work\r\n            let task_name_display_box = document.createElement(\"div\");\r\n            task_name_display_box.className = \"absolute top-0 left-0\";\r\n            task_name_display_box.style.width = task_name_display.offsetWidth + \"px\";\r\n            task_name_display_box.style.height = task_name_display.offsetHeight + \"px\";\r\n            \r\n            container.appendChild(task_name_display_box);\r\n\r\n        }\r\n\r\n        let dragdrop = new DragDrop(this.HTML.taskList);\r\n        setTimeout(() =>  dragdrop.init());\r\n    }\r\n\r\n    updateNoTaskDisplay(hide: boolean): void {\r\n        if (hide) this.HTML.noTask.classList.add(\"hidden\");\r\n        else this.HTML.noTask.classList.remove(\"hidden\");\r\n    }\r\n\r\n    getTasksTotal(): number {\r\n        return this._TASKS.length;\r\n    }\r\n\r\n    init():void {\r\n        this.HTML.addTask.addEventListener(\"submit\",handleAddTask.bind(this));\r\n\r\n        //handle events\r\n        function handleAddTask(this: TaskHandler,event: Event):void {\r\n            event.preventDefault();\r\n\r\n            //get the add task input value\r\n            let task_name_input = this.HTML.addTask.querySelector(\"input\") as HTMLInputElement;\r\n            let task_name = task_name_input.value;\r\n\r\n            const TASK: Task = {\r\n                task_name\r\n            };\r\n\r\n            //reset the input \r\n            task_name_input.value = \"\";\r\n\r\n            //add the task\r\n            this.addTask(TASK);\r\n        }\r\n    }\r\n}\r\n\r\nconst taskHandler = new TaskHandler(document.querySelector(\"#task-handler\") as HTMLElement);\r\ntaskHandler.init();"],"names":[],"version":3,"file":"index.242b51c6.js.map","sourceRoot":"/__parcel_source_root/"}